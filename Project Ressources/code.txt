
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.Enumeration;

import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent;
import gnu.io.SerialPortEventListener;

public class Serialinterface extends Thread implements SerialPortEventListener {
	SerialPort serialPort;
	/** The port we're normally going to use. */
	private static final String PORT_NAMES[] = { "/dev/tty.usbserial-A9007UX1", // Mac OS X
			"/dev/ttyUSB0", // Linux
			"COM4", // Windows
	};
 
	private BufferedReader input;
	private OutputStream output;
	private double puls = 0.0;
	private double timebetween = 0.0;
	private Sound sd = new Sound();
	private double[] zeit = new double[60];
	private static final int TIME_OUT = 2000;
	private static final int DATA_RATE = 9600;
	private boolean close = false;
	private int x = 0;
	private int z = 0;
	private MainFrame mf;
	private double bpm = 0.0;
	private double timebuffer = 0.0;
	private double xy = 0;
	private boolean rr = true;
	private boolean up = false;


	public void setUp(boolean up) {
		this.up = up;
	}

	public void setRr(boolean rr) {
		this.rr = rr;
	}

	private javax.swing.Timer myTimer;

	private javax.swing.Timer timerSound;

	/**
	 * @param close
	 *            the close to set
	 */
	public void setClose(boolean close) {
		this.close = close;
	}

	public Serialinterface(MainFrame mf) {
		this.mf = mf;
		System.out.println("Started");
//		myTimer = new javax.swing.Timer(400, new Listener());
		timerSound = new javax.swing.Timer(100, new SoundListener());

		initialize();

	}

	public void run() {

		while (close != true) {
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	public void initialize() {
		CommPortIdentifier portId = null;
		Enumeration portEnum = CommPortIdentifier.getPortIdentifiers();

		// First, Find an instance of serial port as set in PORT_NAMES.
		while (portEnum.hasMoreElements()) {
			CommPortIdentifier currPortId = (CommPortIdentifier) portEnum.nextElement();
			for (String portName : PORT_NAMES) {
				if (currPortId.getName().equals(portName)) {
					portId = currPortId;
					break;
				}
			}
		}
		if (portId == null) {
			System.out.println("Could not find COM port.");
			return;
		}

		try {
			serialPort = (SerialPort) portId.open(this.getClass().getName(), TIME_OUT);
			serialPort.setSerialPortParams(DATA_RATE, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,
					SerialPort.PARITY_NONE);

			// open the streams
			input = new BufferedReader(new InputStreamReader(serialPort.getInputStream()));
			output = serialPort.getOutputStream();

			serialPort.addEventListener(this);
			serialPort.notifyOnDataAvailable(true);
		} catch (Exception e) {
			System.err.println(e.toString());
		}
	}

	public synchronized void close() {
		if (serialPort != null) {
			serialPort.removeEventListener();
			serialPort.close();
		}
	}

	public synchronized void serialEvent(SerialPortEvent oEvent) {
		if (oEvent.getEventType() == SerialPortEvent.DATA_AVAILABLE) {
			try {
				String inputLine = null;
				if (input.ready()) {
						
					if (z == 60) {
						z = 0;
					}
					
					System.out.println("Line: "+input.readLine());//+ " Time: "+ timebetween);
					timebetween = System.currentTimeMillis()-puls;
					if(timebetween >= 3000) {
						timebetween = 0;
					}
					
					zeit[z] = timebetween;
					
					for(int a = 0; a < 60; a++) {
						timebuffer += zeit[a];
					}
					
					bpm = (60*60) / (timebuffer / 1000);
					if(!rr) {
					if(timebuffer != 0) {
						erhoehen(timebuffer/60);
					}
					}else {
					verringern();
					}

					System.out.println("Herzschlag bei: "+ bpm + " Ab 60 sinnvoll: "+z);
					timebuffer = 0;
					mf.setValue(bpm);
					puls = System.currentTimeMillis();
					z++;
				}

			} catch (Exception e) {
				System.err.println(e.toString());
			}
		}
	}



	private class SoundListener implements ActionListener {
		public void actionPerformed(ActionEvent ae) {
			sd.playSound();
			timerSound.stop();
		}
	}
	
	public void verringern() {
		
		timerSound.setInitialDelay(75);

		timerSound.start();
	}
	public void erhoehen(double time) {
		int reload = (int) time;
		System.out.println("Reload: "+reload);

		if(z >= 59 || up == true) {
		timerSound.setInitialDelay((int) (time-75));
		timerSound.start();
		up = true;
		}
	}
	
	public int getValue() {
		return (int)bpm;
	}

}